import { NextPage } from "next";
import Head from "next/head";
import { Racket } from "../../mocks/data/rackets";
import Image from "next/image";
import { Params } from "next/dist/next-server/server/router";

interface RacketPage {
  racket: Racket;
}

const RacketPage: NextPage<RacketPage> = ({ racket }) => {
  return (
    <div>
      <Head>
        <title>Tennis Store - {racket.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="container mx-auto md:mb-5 md:mt-10 px-4 md:px-0">
        <section className="flex gap-4 px-10">
          <ul className="flex flex-col">
            {racket.images.map((image) => (
              <li key={image.slice(23, image.length - 4)} className="pb-2 pt-2">
                <Image
                  src={image}
                  alt={image.slice(23, image.length - 4)}
                  width="70"
                  height="70"
                  className="mx-auto relative z-1"
                />
              </li>
            ))}
          </ul>
          <Image
            src={racket.images[0]}
            alt={racket.name}
            width="640"
            height="640"
            className="mx-auto relative z-1"
          />
          <div className="flex flex-col px-4">
            <h1 className="font-sans font-bold text-2xl mb-10">
              {racket.name}
            </h1>
            <ul className="flex flex-wrap items-center mb-10">
              <p className="font-bold text-sm mr-4">Colors</p>
              {racket.colors.map((color) => (
                <li className="text-xs">{color}</li>
              ))}
            </ul>
            <ul className="flex flex-wrap items-center mb-10">
              <p className="font-bold text-sm mr-4">Grip sizes:</p>
              <div className="mt-4">
                {racket.gripSizes.map((size) => (
                  <button className="mb-2 mr-4 px-4 pt-2 pb-2 bg-gray-100 text-base">
                    {size}
                  </button>
                ))}
              </div>
            </ul>
            <button className="pt-4 pb-4 pl-8 pr-8 text-base font-bold text-white bg-slate-600">
              Add To Cart
            </button>
          </div>
        </section>
        <section className="flex flex-col bg-gray-50 px-10 pt-10 pb-10">
          <h2 className="mb-10 text-xl font-bold">Description</h2>
          <p className="font-medium leading-relaxed font-sans text-lg">
            {racket.desciption}
          </p>
        </section>
        <section className="flex flex-col bg-slate-600 px-10 pt-10 pb-10">
          <h2 className="mb-10 text-xl font-bold text-white">
            Technical Characteristics
          </h2>
          <ul className="grid grid-cols-2 text-white gap-4">
            <li>
              <span className="font-bold mr-2">Stiffness (RA):</span>
              <span>{racket.technicalCharacteristics.raStiffness}</span>
            </li>
            <li>
              <span className="font-bold mr-2">Recommended Grip:</span>
              <span>{racket.technicalCharacteristics.recommendedGrip}</span>
            </li>
            <li>
              <span className="font-bold mr-2">Recommended Tension:</span>
              <span>{racket.technicalCharacteristics.recommendedTension}</span>
            </li>
            <li>
              <span className="font-bold mr-2">Section:</span>
              <span>{racket.technicalCharacteristics.section}</span>
            </li>
            <li className="flex">
              <span className="font-bold mr-2">Stringing Pattern:</span>
              <span>{racket.technicalCharacteristics.stringingPattern}</span>
            </li>
            <li>
              <span className="font-bold mr-2">Strung/Unstrung:</span>
              <span>{racket.technicalCharacteristics.strungOrUnstrung}</span>
            </li>
            <li className="flex">
              <span className="font-bold mr-2">Unstrung Balance:</span>
              <span>{racket.technicalCharacteristics.unstrungBalance}</span>
            </li>
            <li>
              <span className="font-bold mr-2">Unstrung Weight:</span>
              <span>{racket.technicalCharacteristics.unstrungWeight}</span>
            </li>
          </ul>
        </section>
      </section>
    </div>
  );
};

export async function getStaticPaths() {
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API_MOOCKING_URL}/rackets`
  );
  const rackets: Racket[] = await res.json();

  const paths = rackets.map((racket: Racket) => ({
    params: { id: racket.id },
  }));

  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }: Params) {
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_API_MOOCKING_URL}/rackets/${params.id}`
  );
  const racket: Racket = await res.json();

  return {
    props: {
      racket,
    },
  };
}

export default RacketPage;
